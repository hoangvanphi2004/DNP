---
version: '3.9'
services:
  broker:
    image: confluentinc/cp-kafka:7.6.0
    hostname: broker
    container_name: broker
    # ports:
    #   - "9092:9092"
    #   - "9101:9101"
    networks: 
      - kafka_network
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    # healthcheck:
    #   test: ["CMD", "(kafka-topics --list --bootstrap-server broker:29092 && exit 0) || exit 1"]
    #   interval: 5s
    #   timeout: 10s
    #   retries: 5

  send_video:
    image: dnp/dnp:0.0.0
    hostname: send_video
    container_name: send_video
    command: sh -c "sleep 10 && python3 deleteKafkaTopic.py && python3 createKafkaTopic.py && python3 sendVideo.py && nvidia-smi"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks: 
      - kafka_network
    volumes:
      - ${PWD}/input:/input
      - ${PWD}/output:/output
    # depends_on:
    #   broker:
    #     condition: service_healthy
  bounding_box:
    image: dnp/dnp:0.0.0
    hostname: bounding_box
    container_name: bounding_box
    command: sh -c "sleep 10 && python3 predictBoundingBox.py"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks: 
      - kafka_network
    volumes:
      - ${PWD}/input:/input
      - ${PWD}/output:/output
    # depends_on:
    #   broker:
    #     condition: service_healthy  
  pose:
    image: dnp/dnp:0.0.0
    hostname: pose
    container_name: pose
    command: sh -c "sleep 10 && python3 predictPose.py"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks: 
      - kafka_network
    volumes:
      - ${PWD}/input:/input
      - ${PWD}/output:/output
    # depends_on:
    #   broker:
    #     condition: service_healthy
  receive_video:
    image: dnp/dnp:0.0.0
    hostname: receive_video
    container_name: receive_video
    command: sh -c "sleep 10 && python3 receiveVideo.py"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks: 
      - kafka_network
    volumes:
      - ${PWD}/input:/input
      - ${PWD}/output:/output
    # depends_on:
    #   broker:
    #     condition: service_healthy

networks:
  kafka_network:
    name: kafka_docker_net